AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Part-1 - A basic VPC network setup for testing purposes, including subnets, route tables, and gateways.

Parameters:
  ### Dynamic AZ Selection with Parameterized List:
  ###   You must check available AZs with `aws ec2 describe-availability-zones --all-availability-zones`
  VPCName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /FargateCluster/VPC/VPCName
    Description: "The VPC's logical name"

  AvailabilityZones:
    Type: AWS::SSM::Parameter::Value<CommaDelimitedList>
    Default: /FargateCluster/VPC/AvailabilityZones
    Description: "List of usable Availability Zones"

  Stage:
    Type: String
    Default: Test
    Description: "The Name of the environment"

Resources:
  ### VPC and Networking Components ###
  # VPC serves as the core network boundary for the resources.
  NewVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16 # Defines the private IP address range for the VPC
      EnableDnsSupport: true # Enables DNS resolution within the VPC
      EnableDnsHostnames: true # Enables DNS hostnames for resources
      Tags:
        - Key: Name
          Value: !Ref VPCName
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: FargateCluster

  ### Public Subnets for Nat-Gateway ###
  # Public subnets host the Application Load Balancer and allow direct access from the Internet.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NewVPC
      CidrBlock: 10.0.1.0/24 # IP range for the first public subnet
      #AvailabilityZone: us-west-2a # Hardcoding the AZs does NOT work
      # Automatically select the first AZ
      AvailabilityZone: !Select
        - 0
        - !Ref AvailabilityZones
      MapPublicIpOnLaunch: true # Automatically assigns public IPs to instances
      Tags:
        - Key: Name
          Value: "Public-Subnet-01"
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: FargateCluster

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NewVPC
      CidrBlock: 10.0.2.0/24 # IP range for the second public subnet
      AvailabilityZone: !Select
        - 1
        - !Ref AvailabilityZones
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public-Subnet-02"
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: FargateCluster

  ### Internet Gateway ###
  # Enables public internet access for resources in the public subnets.
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref NewVPC
      InternetGatewayId: !Ref InternetGateway

  ### Route Table for Public Subnets ###
  # Manages routes for public subnets to allow internet access via the Internet Gateway.
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NewVPC
      Tags:
        - Key: Name
          Value: "Public-RouteTable-01"
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: FargateCluster

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NewVPC
      Tags:
        - Key: Name
          Value: "Public-RouteTable-02"
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: FargateCluster

  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0 # Routes all external traffic
      GatewayId: !Ref InternetGateway

  PublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0 # Routes all external traffic
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2

  ### Create a Custom Network ACL ###
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref NewVPC
      Tags:
        - Key: Name
          Value: Public-NACL
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: FargateCluster

  ### Associate NACL with Public Subnet 1 ###
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  ### Associate NACL with Public Subnet 2 ###
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  ### Inbound Rule: Allow HTTPS Traffic (ECR, CloudWatch) ###
  PublicInboundAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  ### Inbound Rule: Allow Ephemeral Ports for Responses ###
  PublicInboundAllowEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 200
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  ### Inbound Rule: Deny All Other Traffic (Explicit) ###
  PublicInboundDenyAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 300
      Protocol: -1 # ALL
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0

  ### Outbound Rule: Allow HTTPS Traffic to AWS Services ###
  PublicOutboundAllowALL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1 # ALL
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  ### Private Subnets for Fargate Tasks ###
  # Private subnets host the backend Fargate tasks, ensuring they are not directly accessible from the internet.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NewVPC
      CidrBlock: 10.0.3.0/24 # IP range for the first private subnet
      AvailabilityZone: !Select
        - 0
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: "Private-Subnet-01"
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: FargateCluster

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NewVPC
      CidrBlock: 10.0.4.0/24 # IP range for the second private subnet
      AvailabilityZone: !Select
        - 1
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: "Private-Subnet-02"
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: FargateCluster

  ### Create a Custom Network ACL ###
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref NewVPC
      Tags:
        - Key: Name
          Value: Private-NACL
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: FargateCluster

  ### Associate NACL with Private Subnet 1 ###
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  ### Associate NACL with Private Subnet 2 ###
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

  ### Inbound Rule: Allow HTTPS Traffic (ECR, CloudWatch) ###
  PrivateInboundAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.0.0/16
      PortRange:
        From: 443
        To: 443

  ### Inbound Rule: Allow Ephemeral Ports for Responses ###
  ### Very very important: Allow ephemeral response ports (1024-65535) for TCP traffic via Nat-Gateway
  PrivateInboundAllowEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 200
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  ### Inbound Rule: Deny All Other Traffic (Explicit) ###
  PrivateInboundDenyAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 300
      Protocol: -1 # ALL
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0

  ### Outbound Rule: Allow HTTPS Traffic to AWS Services ###
  PrivateOutboundAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0   # To the internet via NAT Gateway
      PortRange:
        From: 443
        To: 443

  ### Outbound Rule: Allow Ephemeral Ports for Responses ###
  PrivateOutboundAllowEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 200
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0   # To the internet via NAT Gateway
      PortRange:
        From: 1024
        To: 65535

  ### Outbound Rule: Deny All Other Traffic (Explicit) ###
  PrivateOutboundDenyAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 300
      Protocol: -1 # ALL
      RuleAction: deny
      Egress: true
      CidrBlock: 0.0.0.0/0

Outputs:
  VPCID:
    Description: The ID of the created VPC
    Value: !Ref NewVPC

  PublicSubnet1ID:
    Description: The ID of the first public subnet
    Value: !Ref PublicSubnet1

  PublicSubnet2ID:
    Description: The ID of the second public subnet
    Value: !Ref PublicSubnet2

  PrivateSubnet1ID:
    Description: The ID of the first private subnet
    Value: !Ref PrivateSubnet1

  PrivateSubnet2ID:
    Description: The ID of the second private subnet
    Value: !Ref PrivateSubnet2

  InternetGatewayID:
    Description: The ID of the Internet Gateway
    Value: !Ref InternetGateway

  PublicRouteTable1ID:
    Description: The ID of the first public route table
    Value: !Ref PublicRouteTable1

  PublicRouteTable2ID:
    Description: The ID of the second public route table
    Value: !Ref PublicRouteTable2

  PublicNetworkAclID:
    Description: The ID of the Public Network ACL
    Value: !Ref PublicNetworkAcl

  PrivateNetworkAclID:
    Description: The ID of the Private Network ACL
    Value: !Ref PrivateNetworkAcl
