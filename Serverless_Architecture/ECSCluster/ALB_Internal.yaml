AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Part-6 - Deploys the internal ALB for routing requests within the VPC."

Globals:
  Function:
    Timeout: 20
    Tracing: Active
    Runtime: python3.12
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:7

Parameters:
  VPCID:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ECSCluster/VPC/VPCID
    Description: "The ID of the existing VPC."

  PrivateSubnet1:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ECSCluster/VPC/PrivateSubnet1
    Description: "The first private subnet."

  PrivateSubnet2:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ECSCluster/VPC/PrivateSubnet2
    Description: "The second private subnet."

  ACMCertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ECSCluster/ACMCertificateArn
    Description: "The ARN of the ACM certificate for ALB HTTPS listener"

  ALBName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ECSCluster/ALB/ALBName
    Description: "The name of the ALB."

  ALBS3BucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ECSCluster/ALB/S3BucketName
    Description: "The name of the S3 bucket to store ALB access logs."

  ALBPrefix:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ECSCluster/ALB/ALBPrefix
    Description: "Prefix for ALB access log files in the S3 bucket."

  ECSTaskDefinitionName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ECSCluster/ECS/TaskDefinitionName
    Description: "The Name of the TaskDefinition in ECS Service"

  Stage:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /ECSCluster/StageName
    Description: "The Name of the environment."

Resources:
  ### Security Groups ###
  PrivateHTTPSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for CloudShell access
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          #CidrIp: 10.0.0.0/16  # Limit to traffic from inside the VPC
          SourceSecurityGroupId: !Ref ALBSecurityGroup       # ‚úÖ Only allow ALB traffic
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16  # Limit to traffic from inside the VPC
      Tags:
        - Key: Name
          Value: PrivateHTTPS-SecurityGroup
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: ECSCluster

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for internal ALB
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupName: PrivateHTTPSSecurityGroup  # ‚úÖ Allow from CloudShell
      Tags:
        - Key: Name
          Value: ALB-SecurityGroup
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: ECSCluster

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for internal Lambda
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupName: ALBSecurityGroup           # ‚úÖ Allow inbound from ALB
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16                                 # ‚úÖ Ensure Lambda can reach ALB
      Tags:
        - Key: Name
          Value: Lambda-SecurityGroup
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: ECSCluster

  ### Application Load Balancer ###
  ALBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ALBName
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internal
      Type: application
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref ALBS3BucketName
        - Key: access_logs.s3.prefix
          Value: !Ref ALBPrefix
      Tags:
        - Key: Name
          Value: !Ref ALBName
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: ECSCluster

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALBLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACMCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBDefaultTargetGroup

  ### Routing Rules ###
  ALBListenerRuleBlue:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - peter.tsclowning.com
              - betty.tsclowning.com
              - james.tsclowning.com
              - inez.tsclowning.com
        ### Step 2: Allow requests only via CloudFront (Step 1: Add a custom header (e.g., X-CloudFront-Verified: true) to all origin requests.)
        #- Field: http-header
        #  HttpHeaderConfig:
        #    HttpHeaderName: x-cloudfront-verified
        #    Values:
        #      - true
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupBlue

  ALBListenerRuleGreen:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 2
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - wendy.tsclowning.com
        ### Step 2: Allow requests only via CloudFront (Step 1: Add a custom header (e.g., X-CloudFront-Verified: true) to all origin requests.)
        #- Field: http-header
        #  HttpHeaderConfig:
        #    HttpHeaderName: x-cloudfront-verified
        #    Values:
        #      - true
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupGreen

  ALBListenerRuleMaintenance:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 10
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - "*.tsclowning.com"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBDefaultTargetGroup

  ### ALB Target Groups ###
  ALBTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ECSTaskDefinitionName}-TargetGroup-Blue"
      Port: 443
      Protocol: HTTPS
      ProtocolVersion: HTTP2
      VpcId: !Ref VPCID
      TargetType: ip             # Targets the private IPs of Fargate tasks
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckProtocol: HTTPS
      HealthCheckPath: /healthz
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub "${ECSTaskDefinitionName}-TargetGroup-Blue"
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: ECSCluster

  ALBTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ECSTaskDefinitionName}-TargetGroup-Green"
      Port: 443
      Protocol: HTTPS
      ProtocolVersion: HTTP2
      VpcId: !Ref VPCID
      TargetType: ip             # Targets the private IPs of Fargate tasks
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckProtocol: HTTPS
      HealthCheckPath: /healthz
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub "${ECSTaskDefinitionName}-TargetGroup-Green"
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: ECSCluster

  ALBDefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: DefaultTargetGroup
      TargetType: lambda
      Targets:
        - Id: !GetAtt ALBMaintenanceLambdaFunction.Arn
      HealthCheckEnabled: false
      Tags:
        - Key: Name
          Value: "Default-TargetGroup"
        - Key: Environment
          Value: !Ref Stage
        - Key: Where
          Value: !Ref "AWS::Region"
        - Key: For
          Value: Education
        - Key: System
          Value: ECSCluster

  ### Log Groups ###
  ALBMaintenanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/Lambda/ECSCluster/${Stage}/ALBMaintenance"
      RetentionInDays: 3

  ### üõ†Ô∏è IAM Role for Lambda ###
  ALBMaintenanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/Protect-Me" # Attach the required boundary
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/Lambda/ECSCluster/${Stage}/*:*"
        - PolicyName: VPCAccessExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSubnets
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"

  ### Lambda Function for Forwarding Logs ###
  ALBMaintenanceLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api
      Handler: alb_maintenance.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      Role: !GetAtt ALBMaintenanceRole.Arn    # Use custom role with boundary
      #MemorySize: 128
      #Timeout: 5
      Environment:
        Variables:
          STAGE: !Ref Stage
      LoggingConfig:
        ApplicationLogLevel: INFO     # Controls the application log level (DEBUG, INFO, etc.)
        LogFormat: JSON               # Defines the log format (JSON or Text)
        LogGroup: !Ref ALBMaintenanceLogGroup
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup  # Attach security group (must allow egress)
        SubnetIds:
          - !Ref PrivateSubnet1       # Place Lambda in a private subnet
          - !Ref PrivateSubnet2

Outputs:
  ALBName:
    Description: Name of the ALB
    Value: !Ref ALBName

  ALBPrivateARN:
    Description: ARN of the ALB
    #Value: !Ref ALBLoadBalancer
    Value: !GetAtt ALBLoadBalancer.LoadBalancerArn

  ALBPrivateDNS:
    Description: Private DNS name of the ALB (Internal)
    Value: !GetAtt ALBLoadBalancer.DNSName

  ALBTargetGroupBlueARN:
    Description: ARN of the ALB Target Group of Blue
    #Value: !Ref ALBTargetGroupBlue
    Value: !GetAtt ALBTargetGroupBlue.TargetGroupArn

  ALBTargetGroupGreenARN:
    Description: ARN of the ALB Target Group of Green
    Value: !GetAtt ALBTargetGroupGreen.TargetGroupArn

  PrivateHTTPSSecurityGroupID:
    Description: The ID of SecurityGroup for CloudShell within Private Subnets
    Value: !Ref PrivateHTTPSSecurityGroup

  ALBSecurityGroupID:
    Description: The ID of SecurityGroup for ALB within Private Subnets
    Value: !Ref ALBSecurityGroup

  LambdaSecurityGroupID:
    Description: The ID of SecurityGroup for Lambda within Private Subnets
    Value: !Ref LambdaSecurityGroup

  ALBCostWarning:
    Description: "‚ö†Ô∏è Warning: The Application Load Balancer (ALB) is a paid service and incurs hourly and LCU-based charges. üïí Be cautious!"
    Value: "ALB is running and may generate costs. Delete the stack when not in use."
